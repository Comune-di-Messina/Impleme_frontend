<?php

/**
 * @file
 * Contains m_core.module.
 */

use Drupal\m_api\PrenotaUfficioService;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\wso2_with_jwt\Wso2Connection;
use GuzzleHttp\TransferStats;
use Drupal\Core\Entity\EntityInterface;
use Drupal\views\ViewExecutable;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Form\EnforcedResponseException;
use Drupal\Core\Form\FormAjaxException;
use Drupal\Core\Form\FormState;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\m_core\Breadcrumbs;
use Drupal\m_core\Controller\MCoreAjaxCommandsController;
use Drupal\m_core\Controller\MCoreController;
use Drupal\media\Entity\Media;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\Views;

const SECTION_FILTER = [
  'aggregatore_servizi',
  'comune_servizi',
  'sala',
  'scheda_servizio',
];

/**
 * Implements hook_help().
 */
function m_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the m_core module.
    case 'help.page.m_core':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module include all core customizations for Messina website') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function m_core_theme($existing, $type, $theme, $path) {
  return [
    'gallery_element' => [
      'variables' => [
        'image' => NULL,
      ],
      'template' => drupal_get_path('theme', 'portalemessina') . '/pattern-lab/source/_patterns/01-molecules/02-articles/gallery/gallery-element/gallery-element',
      'path' => '',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function m_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'views_exposed_form') {
    if (isset($form["actions"]["reset"]["#access"])) {
      $form["actions"]["reset"]["#access"] = TRUE;
      $form["actions"]["reset"]["#attributes"]['class'][] = 'btn';
      $form["actions"]["reset"]["#attributes"]['class'][] = 'btn-secondary';
    }
    if (isset($form["actions"]["submit"]["#access"])) {
      $form["actions"]["submit"]["#access"] = TRUE;
      $form["actions"]["submit"]["#attributes"]['class'][] = 'btn-submit';
    }
  }

  if (isset($form["field_term_temi"])) {
    $form["field_term_temi"]["widget"]["#multiple"] = FALSE;
    _m_core_update_hierarchy_field_term_options($form, 'field_term_temi');
  }

  if (isset($form["field_argomenti_correlati"])) {
    _m_core_update_hierarchy_field_term_options($form, 'field_argomenti_correlati');
  }

  if (isset($form["field_categoria_servizio"])) {
    $form["field_categoria_servizio"]["widget"]["#multiple"] = FALSE;
    _m_core_update_hierarchy_field_term_options($form, 'field_categoria_servizio');
  }

  if (isset($form["field_categorie_correlate"])) {
    _m_core_update_hierarchy_field_term_options($form, 'field_categorie_correlate');
  }

  if (isset($form["field_moduli"]["widget"])) {
    foreach ($form["field_moduli"]["widget"] as $key => &$paragraph) {
      if (isset($paragraph["#paragraph_type"])) {
        switch ($paragraph["#paragraph_type"]) {
          case 'carosello_con_intro_small':
          case 'carosello_con_testata_small':
            foreach ($paragraph["subform"] as $paragraph_key => &$paragraph_field) {
              // @reminder force allowed ct for inline entiy form widget.
              if (isset($paragraph_field["widget"]["entities"])) {
                $allowed_ct = [
                  "scheda",
                  "scheda_servizio",
                  "contenuto_multimediale",
                  "itinerario",
                ];

                if ($paragraph["#paragraph_type"] === 'carosello_con_testata_small') {
                  $allowed_ct[] = 'aggregatore_servizi';
                }

                foreach ($paragraph_field["widget"]["actions"]["bundle"]["#options"] as $content_type => $ct_name) {
                  if (!in_array($content_type, $allowed_ct)) {
                    unset($paragraph_field["widget"]["actions"]["bundle"]["#options"][$content_type]);
                  }
                }

                foreach ($paragraph_field["widget"]["entities"] as $entity_key => &$entity) {
                  if (isset($entity["actions"]["ief_entity_edit"])) {
                    unset($entity["actions"]["ief_entity_edit"]);
                  }
                  if (isset($entity["form"]["delete"])) {
                    $original_markup = $entity["form"]["message"]["#markup"];
                    $label = $original_markup->getArguments();
                    $entity["form"]["message"]["#markup"] = t('@original_string %label? The content will removed just from the carousel, NOT from the website.', [
                      '@original_string' => str_replace('%label?', '', $original_markup->getUntranslatedString()),
                      '%label' => $label['%label'],
                    ]);
                    unset($entity["form"]["delete"]);
                  }
                }
              }
            }
            break;
        }
      }
    }
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function m_core_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {
  $fields = [
    "uid",
    "promote",
    "sticky",
    "path",
    "created",
    "status",
  ];

  foreach ($fields as $field) {
    $entity_form[$field]['#access'] = FALSE;
    $entity_form[$field]['#disabled'] = TRUE;
  }
}

/**
 * Update hierarchy in taxonomy term form fields.
 *
 * @param array $form
 *   The form array.
 * @param string $field_name
 *   The field name to update.
 */
function _m_core_update_hierarchy_field_term_options(array &$form, $field_name) {
  $updated_options = [];
  foreach ($form[$field_name]["widget"]["#options"] as $tid => $term_name) {
    $exploded = explode('|', $term_name);
    if (isset($exploded[1])) {
      $updated_options[$exploded[0]][$tid] = $exploded[1];
    }
  }
  $form[$field_name]["widget"]["#options"] = $updated_options;
}

/**
 * Implements hook_preprocess_pattern_user().
 */
function m_core_preprocess_pattern_user(&$variables) {
  $variables['breadcrumbs'] = _get_moved_breadcrumbs();
  $variables['selectComuni'] = [
    '#markup' => '<div class="filters-wrapper"></div>',
  ];

  $variables["attributes"]->addClass('hide-filters');
}

/**
 * Implements hook_preprocess_html().
 */
function m_core_preprocess_html(&$variables) {
  $variables["page"]['#attached']['library'][] = 'leaflet/leaflet';
  $variables["page"]['#attached']['library'][] = 'leaflet_markercluster/leaflet-markercluster';
  $variables["page"]['#attached']['library'][] = 'm_core/fullcalendar';
  $variables["page"]['#attached']['library'][] = 'm_core/swipebox';
  $variables["page"]['#attached']['library'][] = 'm_core/m-maps';
  $variables["page"]['#attached']['library'][] = 'm_core/m-calendar';
  $variables["page"]['#attached']['library'][] = 'm_core/m-core';

  $tempstore = Drupal::service('user.private_tempstore')
    ->get('m_core');

  $variables['is_front'] = Drupal::service('path.matcher')->isFrontPage();

  if ($variables['is_front'] === TRUE) {
    $tempstore->set('id_comune_selezionato', NULL);
  }
}

/**
 * Implements hook_preprocess_region__header().
 */
function m_core_preprocess_region__header(&$variables) {
  $current_user = Drupal::currentUser();

  try {
    $form = m_core_get_search_bar();
  }
  catch (EnforcedResponseException $e) {
  }
  catch (FormAjaxException $e) {
  }

  $variables["elements"]['search_field'] = isset($form) ? $form : '';

  $language = Drupal::languageManager()->getCurrentLanguage()->getName();

  $variables["elements"]['languageswitcher']['current_language'] = substr($language, 0, 3);

  $id_comune_selezionato = _m_core_get_comune_selezionato();
  $variables['path_to_comune'] = NULL;
  if ($id_comune_selezionato !== NULL) {
    $comune = Node::load($id_comune_selezionato);
    if (isset($comune)) {
      Drupal::service('m_core.default')->retrieveLogoByCommune($variables, $comune);
    }

    $alias = Drupal::service('path.alias_manager')
      ->getAliasByPath('/node/' . $id_comune_selezionato);

    $variables['path_to_comune'] = $alias;
  }
  Drupal::service('m_core.default')->setVariablesButtonLearnMore($variables);

  $options = [
    'attributes' => [
      'class' => [
        'navbar-brand',
      ],
      'target' => '_blank',
    ],
  ];
  $url = Url::fromUri('//www.comune.messina.it', $options);
  $variables['citta_metropolitana'] = Link::fromTextAndUrl(t('nome_amministrazione_slim_header'), $url);

  $personal_area_options = [
    'attributes' => [
      'class' => [
        'btn',
        'btn-primary',
        'btn-sm',
        'btn-login',
      ],
    ],
  ];

  $activeContexts = Drupal::service('context.manager')->getActiveContexts();
  if (!empty($activeContexts)) {
    foreach ($activeContexts as $key => $activeContext) {
      if ($activeContext->getName() === 'servizi') {

        if (!$current_user->isAnonymous()) {
          $label = t('Personal area');
          $route = 'user.page';
          $variables['personal_area_link'] = Link::createFromRoute($label, $route, [], $personal_area_options);
          $variables['logout'] = Link::createFromRoute(t('Logout'), 'user.logout', [], $personal_area_options);
        }
        else {
          $label = t('Login with SPID');
          $route = 'user.login';
          $variables['personal_area_link'] = Drupal::formBuilder()->getForm('Drupal\openid_connect\Form\OpenIDConnectLoginForm');
          $variables['logout'] = NULL;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function m_core_preprocess_block(&$variables) {
  if ($variables["base_plugin_id"] === 'language_block') {
    foreach ($variables["content"]["#links"] as $links) {
      $links["title"] = substr($links["title"], 0, 3);
    }
  }

  if ($variables['plugin_id'] === 'system_branding_block') {
    $node = Drupal::service('m_core.default')->retrieveCurrentNodeFromRequest();
    $nid = Drupal::service('m_core.default')->getNidComune($node);
    $language = Drupal::languageManager()->getCurrentLanguage()->getId();
    $links = (!is_null($nid)) ? Drupal::service('path_alias.manager')
      ->getAliasByPath('/node/' . $nid) : '/';
    $variables['path_to_comune'] = '/' . $language . $links;
    $variables["#cache"]["max-age"] = 0;
    if (isset($nid)) {
      $comune = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
      Drupal::service('m_core.default')->retrieveLogoByCommune($variables, $comune);
    }
  }
  if (
    $variables['plugin_id'] === 'system_menu_block:services'
    || $variables["elements"]["#id"] == 'portalemessina_main_menu'
    || $variables["elements"]["#id"] == 'navigazioneprincipale'
  ) {
    $variables["elements"]["#cache"]["max-age"] = 0;
    $variables["elements"]["content"]["#cache"]["max-age"] = 0;
    $variables["#cache"]["max-age"] = 0;
  }
}

/**
 * Implements hook_preprocess_main_menu().
 */
function m_core_preprocess_menu(&$variables) {
  if ($variables["menu_name"] == 'main' || $variables["menu_name"] == 'services') {
    $controller = new MCoreController();

    $route_match = Drupal::routeMatch();
    $node = $route_match->getParameter('node');

    $id_comune_selezionato = ($variables["menu_name"] == 'main') ?
      _m_core_get_comune_selezionato()
      : Drupal::service('m_core.default')->getNidComune($node);

    foreach ($variables["items"] as $mlid => $menu_link) {
      // @reminder mlid visitMe.
      if ($mlid === 'menu_link_content:caecceec-f72c-4ad4-973c-4df3ec9ab367') {
        if ($id_comune_selezionato !== '1') {
          unset($variables["items"][$mlid]);
        }
      }
      else {
        if ($id_comune_selezionato !== NULL) {
          $route_parameters = $menu_link["url"]->getRouteParameters();
          if (isset($route_parameters['node'])) {
            $aggregatore_globale = Node::load($route_parameters['node']);
          }

          if (isset($aggregatore_globale)) {
            if ($aggregatore_globale instanceof Node) {
              if ($aggregatore_globale->hasField('field_term_tema') && !$aggregatore_globale->get('field_term_tema')
                ->isEmpty()) {
                $id_tema = $aggregatore_globale->get('field_term_tema')->target_id;
              }
              if ($aggregatore_globale->hasField('field_categoria_agg_servizi') && !$aggregatore_globale->get('field_categoria_agg_servizi')
                ->isEmpty()) {
                $id_tema = $aggregatore_globale->get('field_categoria_agg_servizi')->target_id;
              }

              $info_aggregatore = $controller->getMenuLinkAggregatore($id_comune_selezionato, $id_tema, $variables["menu_name"]);
            }
          }

          if (empty($info_aggregatore)) {
            unset($variables["items"][$mlid]);
          }
          else {
            ($variables["menu_name"] == 'main') ?
              $variables["items"][$mlid]["url"]->setRouteParameter('node', $info_aggregatore[0]["entity_id"])
              : $variables["items"][$mlid]["url"]->setRouteParameter('node', reset($info_aggregatore));
            if ($node instanceof Node) {
              if ($node->hasField('field_term_temi')) {
                $parents = $controller->getParentTerm($node->get('field_term_temi')->target_id);
                $parent = reset($parents);
                $node_referenced_aggregatore = $parent->id();
              }

              if ($node->hasField('field_term_tema')) {
                $node_referenced_aggregatore = $node->get('field_term_tema')->target_id;
              }
            }
            if ($variables["menu_name"] == 'services') {
              $aggregatore_servizi = Node::load(reset($info_aggregatore));
              if ($aggregatore_servizi instanceof Node) {
                if (
                  $aggregatore_servizi->hasField('field_categoria_agg_servizi')
                  && !$aggregatore_servizi->get('field_categoria_agg_servizi')
                    ->isEmpty()
                ) {
                  $node_referenced_aggregatore = $aggregatore_servizi->get('field_categoria_agg_servizi')->target_id;
                }
              }
            }

            if (
              isset($id_tema) and
              isset($node_referenced_aggregatore) and
              $node_referenced_aggregatore === $id_tema and
              $variables["menu_name"] == 'main'
            ) {
              $variables["items"][$mlid]["in_active_trail"] = TRUE;
              $variables["items"][$mlid]["url"]->setOption('set_active_class', TRUE);
            }
            if ($variables["menu_name"] == 'services') {
              $url_alias = Drupal::service('path_alias.manager')
                ->getAliasByPath('/node/' . reset($info_aggregatore));
              $current_path = Drupal::service('path.current')->getPath();
              $result = Drupal::service('path.alias_manager')
                ->getAliasByPath($current_path);
              if ($url_alias === $result) {
                $variables["items"][$mlid]["in_active_trail"] = TRUE;
                $variables["items"][$mlid]["url"]->setOption('set_active_class', TRUE);
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function m_core_preprocess_paragraph(&$variables) {
  $variables['attributes']['class'][] = 'paragraph-' . $variables["paragraph"]->id();
  if ($variables["paragraph"]->getType() === 'mappa_indirizzi') {
    $variables["content"]["sidebar"] = [
      '#type' => 'container',
      '#weight' => '5',
      '#attributes' => [
        'class' => [
          'mappa-sidebar',
        ],
      ],
      'titolo' => $variables["content"]["field_titolo"],
      'moduli' => $variables["content"]["field_moduli"],
    ];

    $renderedView = views_embed_view('paragraph_map', 'default', $variables["paragraph"]->id());
    $variables["content"]['map'] = [
      '#weight' => '10',
      '#markup' => Drupal::service('renderer')->render($renderedView),
    ];

    unset($variables["content"]["field_titolo"]);
    unset($variables["content"]["field_moduli"]);
  }

  if ($variables["paragraph"]->getType() === 'elemento_mappa') {
    $variables['attributes']['data-marker-id'] = $variables["paragraph"]->id();
  }

  if ($variables["paragraph"]->getType() === 'elemento_mappa') {
    $variables["content"]["field_titolo_dettaglio"] = $variables["content"]["field_titolo"];
    $variables["elements"]["#group_children"]["field_titolo_dettaglio"] = 'group_content';
    $variables["content"]["field_titolo_dettaglio"]['#attributes']['class'][] = 'field-titolo-dettaglio';

    $variables["content"]["field_back"] = [
      '#markup' => new FormattableMarkup('<div class="field-back">@text</div>', [
        '@text' => t('go back'),
      ]),
      '#weight' => 50,
      '#attributes' => [
        'class' => [
          'field-back',
        ],
      ],
    ];

    $variables["elements"]["#group_children"]["field_back"] = 'group_content';
  }

  if ($variables["paragraph"]->getType() === 'servizi_scopri_anche') {
    $title = $variables["content"]["field_titolo"][0]["#context"]["value"];
    $variables["content"]["field_titolo"][0]["#template"] = '{{ value|raw }}';
    $variables["content"]["field_titolo"][0]["#context"]["value"] = '<h3 class="servizi-scopri-anche-title">' . $title . '</h3>';
  }

  if ($variables["paragraph"]->getType() === 'calendario_eventi') {
    if (isset($variables["content"]["field_cta"])) {
      $variables["content"]["field_cta"][0]["#options"] = [
        'attributes' => [
          'class' => [
            'btn',
            'btn-primary',
          ],
        ],
      ];
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function m_core_preprocess_field(&$variables) {
  if ($variables["element"]["#field_name"] === 'field_argomenti_correlati') {
    $node = $variables["element"]["#object"];
    $id_comune = $node->get('field_comune')->target_id;

    foreach ($variables["items"] as $key => $value) {
      if (isset($value["content"]["#plain_text"])) {
        $term_id = $value["content"]["#plain_text"];
        $term = Term::load($term_id);
        $controller = new MCoreController();
        $id_aggregatore = $controller->getAggregatore($id_comune, $term->id());

        $options = [
          'query' => [
            'field_term_temi_target_id_selective' => $term_id,
          ],
        ];

        if (isset($id_aggregatore)) {
          $options = ['attributes' => ['class' => 'chip-label']];
          $link = Link::createFromRoute($term->get('name')->value, 'entity.node.canonical', ['node' => $id_aggregatore], $options);

          $variables["items"][$key]["content"] = [
            '#markup' => '<div class="chip chip-primary chip-simple">' . $link->toString() . '</div>',
          ];
        }
        // @reminder check if exist aggregatore with comune if comune isset on
        // child.
        else {
          unset($variables["items"][$key]);
        }
      }
    }
  }

  if ($variables["element"]["#field_name"] === 'field_media_image_2') {
    if ($variables["element"]["#view_mode"] === 'thumb_gallery') {
      $content = $variables["items"][0]["content"];
      $variables["items"][0]["content"] = [
        '#theme' => 'gallery_element',
        '#image' => [
          'src' => ['#markup' => $content['#markup']],
          'alt' => [
            '#markup' => $variables["element"]["#items"]->get(0)
              ->get('alt')
              ->getValue(),
          ],
          'title' => [
            '#markup' => $variables["element"]["#items"]->get(0)
              ->get('title')
              ->getValue(),
          ],
        ],
      ];
    }
  }

  if ($variables["element"]["#field_name"] === 'field_vista') {
    if ($variables["items"][0]["content"]["contents"]["#name"] === 'eventi') {
      if ($variables["items"][0]["content"]["contents"]["#display_id"] === 'block_4' || $variables["items"][0]["content"]["contents"]["#display_id"] === 'block_5') {

        $variables["items"][0]["content"]['calendar'] = [
          '#weight' => 0,
          '#markup' => '<div id="calendar"></div>',
        ];

        $variables["items"][0]["content"]["contents"]['#weight'] = 5;
      }
    }
  }

  if ($variables["element"]["#field_name"] === 'field_data') {
    if ($variables["element"]["#view_mode"] === 'calendario') {
      unset($variables["items"][0]["content"]["separator"]);
      unset($variables["items"][0]["content"]["end_date"]);
    }
  }
  if ($variables["element"]["#field_name"] === 'field_cover') {
    switch ($variables["element"]["#bundle"]) {
      case 'contenuto_multimediale':
      case 'itinerario':
        if ($variables["element"]["#object"]->hasField('field_tipologia')) {
          $type = $variables["element"]["#object"]->get('field_tipologia')
            ->getValue();
        }

        if ($variables["element"]["#object"]->hasField('field_tipologia_itinerario')) {
          $type = $variables["element"]["#object"]->get('field_tipologia_itinerario')
            ->getValue();
        }

        if (isset($type[0]['value'])) {
          switch (strtolower($type[0]['value'])) {
            case 'video':
              $node = $variables["element"]["#object"];
              $original_media_array = $variables["items"][0]["content"];

              $link = m_core_get_video_link($node, 'grid-cover', $original_media_array);

              $variables["items"][0]["content"] = $link;
              break;

            case 'link esterno':
              $node = $variables["element"]["#object"];
              $original_media_array = $variables["items"][0]["content"];

              $link = m_core_get_external_link($node, 'grid-cover', $original_media_array);

              $variables["items"][0]["content"] = $link;
              break;
          }
        }
        break;

      case 'itinerario':
        if ($variables["element"]["#object"]->hasField('field_tipologia')) {
          $type = $variables["element"]["#object"]->get('field_tipologia')
            ->getValue();
        }

        if ($variables["element"]["#object"]->hasField('field_tipologia_itinerario')) {
          $type = $variables["element"]["#object"]->get('field_tipologia_itinerario')
            ->getValue();
        }
        break;
    }
  }

  if ($variables["element"]["#field_name"] === 'node_link') {
    if ($variables["element"]["#object"]->hasField('field_tipologia')) {
      $type = $variables["element"]["#object"]->get('field_tipologia')
        ->getValue();
    }

    if ($variables["element"]["#object"]->hasField('field_tipologia_itinerario')) {
      $type = $variables["element"]["#object"]->get('field_tipologia_itinerario')
        ->getValue();
    }

    if (isset($type[0]['value'])) {
      switch (strtolower($type[0]['value'])) {
        case 'video':
          $node = $variables["element"]["#object"];
          $link = m_core_get_video_link($node);

          $variables["items"][0]["content"] = $link;
          break;

        case 'link esterno':
          $node = $variables["element"]["#object"];
          if ($node->get('type') === "contenuto_multimediale") {
            $link = m_core_get_external_link($node, 'map');
            $variables["items"][0]["content"] = $link;
          }
          else {
            $value = $variables["element"]["#object"]->get('field_external_link')
              ->getValue();
            if (!empty($value) and isset($value[0]['uri'])) {
              $url = Url::fromUri($value[0]['uri'], ['attributes' => ['target' => '_blank']]);
              $label = t('Read more');
              if (!empty($value[0]["title"])) {
                $label = $value[0]["title"];
              }

              $variables["items"][0]["content"] = Link::fromTextAndUrl($label, $url);
            }
          }
          break;
      }
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function m_core_preprocess_views_view(&$variables) {
  if ($variables["view"]->id() == 'servizi_area_personale') {
    if ($variables["view"]->current_display === 'block_1') {
      $variables["content_attributes"]['class'][] = 'h-grid-3col';
    }
  }
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function m_core_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  if ($view->storage->id() == 'itinerari') {
    switch ($view->current_display) {
      case 'attachment_1':
      case 'attachment_2':
        $node = $variables['row']->_entity;
        $field = $variables['field'];

        if ($field->field == 'title') {

          /** @var \Drupal\taxonomy\Entity\Term $term */
          $term = Term::load($node->field_term_temi->target_id);
          $term_name = $term->getName();

          $type = $node->get('field_tipologia_itinerario')->getValue();

          if (isset($type[0]['value'])) {
            switch (strtolower($type[0]['value'])) {
              case 'video':
                $link = m_core_get_video_link($node, 'map');
                break;

              case 'link esterno':
                $value = $node->get('field_external_link')
                  ->getValue();
                if (!empty($value) and isset($value[0]['uri'])) {
                  $url = Url::fromUri($value[0]['uri'], ['attributes' => ['target' => '_blank']]);
                  $label = t('Read more');
                  $link = Link::fromTextAndUrl($label, $url);
                }
                break;
            }
          }

          if (isset($link)) {
            $markup = new FormattableMarkup('<div class="titolo">@title</div>
              <div class="link">@link</div>', [
                '@term_name' => $term_name,
                '@title' => $node->getTitle(),
                '@link' => $link->toString(),
              ]);

            // @TODO: monitorare utilità di questo accrocchio.
            $variables['output'] = $markup;
          }
        }
        break;
    }
  }
}

/**
 * Get link to create video modal.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node with video url.
 *
 * @return \Drupal\Core\Link
 *   The link object.
 */
function m_core_get_video_link(Node $node, $identifier = 'grid', $original_media_array = NULL) {
  $label = t('Watch the video');

  $field_video_url = $node->get('field_video_url');
  $value = $field_video_url->getValue();

  /** @var \Drupal\media\MediaInterface $media_video */
  $media_video = Media::load($value[0]['target_id']);
  $media_array = $media_video->toArray();
  $video_url = $media_array['field_media_oembed_video'][0]['value'];

  if (strpos($video_url, 'youtu.be') !== FALSE || strpos($video_url, 'embed') !== FALSE) {
    $exploded = explode('/', $video_url);
    $code = end($exploded);
    $video_url = 'https://www.youtube.com/watch?v=' . $code;
  }

  $url = Url::fromUri($video_url, [
    'attributes' => [
      'class' => 'swipebox-video',
      'rel' => $identifier . '-video-' . $node->id(),
    ],
  ]);

  $link = Link::fromTextAndUrl($label, $url);

  if (isset($original_media_array)) {
    $media_markup_raw = render($original_media_array);
    $media_markup = Markup::create($media_markup_raw);
    $link = Link::fromTextAndUrl($media_markup, $url);
  }

  return $link;
}

/**
 * Get link to open the external link.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node with video url.
 *
 * @return \Drupal\Core\Link
 *   The link object.
 */
function m_core_get_external_link(Node $node, $identifier = 'grid', $original_media_array = NULL) {
  $label = t('Open the tour');

  $field_video_url = $node->get('field_external_link');
  $value = $field_video_url->getValue();
  if (!empty($value) and isset($value[0]['uri'])) {
    $url = Url::fromUri($value[0]['uri'], [
      'attributes' => [
        'target' => '_blank',
      ],
    ]);
    $link = Link::fromTextAndUrl($label, $url);

    if (isset($original_media_array)) {
      $media_markup_raw = render($original_media_array);
      $media_markup = Markup::create($media_markup_raw);
      $link = Link::fromTextAndUrl($media_markup, $url);
    }

    return $link;
  }
}

/**
 * Implements hook_preprocess_pattern_page_basic().
 */
function m_core_preprocess_pattern_page_basic(&$variables) {
  $node = $variables["context"]->getProperty('entity');
  if ($node->getType() === 'comune') {
    $variables['category'] = new FormattableMarkup('@type', [
      '@type' => t('Places'),
    ]);
    $variables['category_icon'] = 'luoghi';

    $variables["hero_title"]["node_title"][0][0]["#context"]["output"] = t('Discover') . ' ' . $variables["hero_title"]["node_title"][0][0]["#context"]["output"];

    $text = new FormattableMarkup('<h5>@text</h5>', [
      '@text' => t('Discover the topics'),
    ]);

    $menu = _m_core_get_menu('main');
    if ($menu instanceof Markup) {
      $menu = $menu->__toString();
    }
    $variables['hero_bottom_left'] = [
      '#type' => 'container',
      'label' => ['#markup' => $text->__toString()],
      'menu' => ['#markup' => $menu],
    ];

    try {
      $form = m_core_get_search_bar();
    }
    catch (EnforcedResponseException $e) {
    }
    catch (FormAjaxException $e) {
    }

    $variables['hero_bottom_right'] = isset($form) ? $form : '';
  }
  if ($node->getType() === 'comune_servizi') {
    $variables['category'] = new FormattableMarkup('@type', [
      '@type' => t('Services'),
    ]);
    $variables['category_icon'] = 'servizi';

    $text = new FormattableMarkup('<h5>@text</h5>', [
      '@text' => t('Discover the topics'),
    ]);

    $menu = _m_core_get_menu('services');
    if ($menu instanceof Markup) {
      $menu = $menu->__toString();
    }
    $variables['hero_bottom_left'] = [
      '#type' => 'container',
      'label' => ['#markup' => $text->__toString()],
      'menu' => ['#markup' => $menu],
    ];

    try {
      $form = m_core_get_search_bar();
    }
    catch (EnforcedResponseException $e) {
    }
    catch (FormAjaxException $e) {
    }

    $variables['hero_bottom_right'] = isset($form) ? $form : '';
  }
}

/**
 * Get menu by machine name.
 *
 * @param string $menu_name
 *   The menu name.
 *
 * @return mixed
 *   The renderable menu.
 */
function _m_core_get_menu($menu_name) {
  $menu_tree = Drupal::menuTree();
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);
  $tree = $menu_tree->load($menu_name, $parameters);
  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];

  $tree = $menu_tree->transform($tree, $manipulators);
  $menu = $menu_tree->build($tree);
  if (!empty($theme_alter)) {
    $menu['#theme'] = $theme_alter;
  }

  return Drupal::service('renderer')->render($menu);
}

/**
 * Implements hook_preprocess_pattern_page_aggregatore().
 */
function m_core_preprocess_pattern_page_aggregatore(&$variables) {
  $variables['breadcrumbs'] = _get_moved_breadcrumbs();

  $node = $variables["context"]->getProperty('entity');
  if ($node->getType() === 'aggregatore_tema') {
    if ($variables["context"]->getProperty('view_mode') === 'full') {
      $tema = $node->get('field_term_tema')->target_id;
      $comune = $node->get('field_comune')->target_id;

      if (!empty($tema) and empty($comune)) {
        $form = Drupal::formBuilder()
          ->getForm('Drupal\m_core\Form\SelectComuniXTemaForm');

        if (count($form["comuni"]["#options"]) > 0) {
          $variables["select_comune"] = $form;
        }
      }

      if ($tema === '16') {
        $variables['filters'] = new FormattableMarkup('<h3>@text</h3>', [
          '@text' => t('Our guides'),
        ]);
      }

      $current_breadcrumbs = _get_moved_breadcrumbs();
      $links = $current_breadcrumbs["#links"];
      $length = count($links) - 2;

      $back_link_created = FALSE;
      while ($length >= 0 && $back_link_created === FALSE) {
        if (isset($links[$length])) {
          if ($links[$length]->getUrl()->getRouteName() !== '<nolink>') {
            $back_link = Link::fromTextAndUrl(t('Torna indietro'), $links[$length]->getUrl());
            $back_link_created = TRUE;
          }
        }
        $length--;
      }

      if (isset($back_link)) {
        $variables['back'] = $back_link->toString();
      }

      // Check if exists an aggregatore_tema without
      // a selected city value and with the same
      // theme.
      if ($node->get('field_comune')->getValue()) {
        $entityStorage = Drupal::entityTypeManager()->getStorage('node');
        $jointsQuery = $entityStorage->getQuery();
        $jointsQuery->condition('status', TRUE)
          ->condition('type', 'aggregatore_tema')
          ->condition('field_term_tema', $node->get('field_term_tema')->entity->id())
          ->notExists('field_comune');
        $joints = $jointsQuery->execute();

        if (count($joints)) {
          $joints = end($joints);
          $joints = $entityStorage->load($joints);
          // Build joint's link.
          $jointLink = $joints->toLink(t('Change city'), 'canonical', ['absolute' => TRUE]);
          $variables['change_comune'] = $jointLink;
        }
      }
    }
  }

  if ($node->getType() === 'aggregatore_servizi') {
    if ($variables["context"]->getProperty('view_mode') === 'full') {
      $title = $node->label();
      $class_title = strtolower(trim(str_replace(' ', '_', $title)));
      $variables['class_title'] = $class_title;

      $tema = $node->get('field_categoria_agg_servizi')->target_id;
      $comune = $node->get('field_comune')->target_id;
      if (!empty($tema) and empty($comune)) {
        $form = Drupal::formBuilder()
          ->getForm('Drupal\m_core\Form\SelectComuniXTemaServiziForm');

        if (count($form["comuni"]["#options"]) > 0) {
          $variables["select_comune"] = $form;
        }
      }

      // Check if exists an aggregatore_tema without
      // a selected city value and with the same
      // theme.
      if (!empty($comune)) {
        $entityStorage = Drupal::entityTypeManager()->getStorage('node');
        $jointsQuery = $entityStorage->getQuery();
        $jointsQuery->condition('status', TRUE)
          ->condition('type', 'aggregatore_servizi')
          ->condition('field_categoria_agg_servizi', $tema)
          ->notExists('field_comune');
        $joints = $jointsQuery->execute();

        if (count($joints)) {
          $joints = end($joints);
          $joints = $entityStorage->load($joints);
          // Build joint's link.
          $jointLink = $joints->toLink(t('Change city'), 'canonical', ['absolute' => TRUE]);
          $variables['change_comune'] = $jointLink;
        }
      }

      if (!empty($tema) and !empty($comune)) {
        $nid = Drupal::service('m_core.default')->getNidComune($node);
        if (isset($nid)) {
          $variables['back'] = Link::createFromRoute(
            t('Go back'),
            'entity.node.canonical',
            ['node' => $nid]
          );
        }
      }
    }
  }

  if (isset($variables["view"]["field_vista"][0])) {
    /** @var \Drupal\views\ViewExecutable $view */
    $view = $variables["view"]["field_vista"][0]["contents"]["#view"];
    switch ($view->id()) {
      case 'guide_agenzie_turistiche':
        // Popolo i blocchi; la tab abilitata
        // di default è determinata del m_core.js.
        // 'block_1' = Guide turistiche; 'block_2' = Agenzie turistiche;.
        if ($view->current_display === 'block_1') {
          $attached_view = Views::getView('guide_agenzie_turistiche');
          // La attached view è quella delle agenzie;
          // la view è quella delle guide.
          if (is_object($attached_view)) {
            $attached_view->setArguments([]);
            $attached_view->setDisplay('block_2');
            $attached_view->preExecute();
            $attached_view->execute();
            $content = $attached_view->buildRenderable('block_2', []);

            $variables["content"]["field_vista"][1]["contents"] = $content;

            $guide = t('Tourist guides');
            $agenzie = t('Licensed tourist agencies');
            $prefix = new FormattableMarkup('<ul class="tab-navigation container">
                        <li class="tab-element"><a href="" data-show="block_2" class="active">@agenzie</a></li>
                        <li class="tab-element"><a href="" data-show="block_1">@guide</a></li>
                        </ul>', [
                          '@guide' => $guide,
                          '@agenzie' => $agenzie,
                        ]);

            $variables["content"]["field_vista"]['#prefix'] = $prefix;
          }
        }
        break;

      default:
        $variables['filters'] = [
          '#markup' => '<div class="filters-wrapper"></div>',
        ];

        $variables['map'] = [
          '#markup' => '<div class="map-wrapper"></div>',
        ];

        $variables["attributes"]->addClass('hide-filters');
    }
  }

  if (!isset($variables['back']) && !isset($variables['change_comune'])) {
    $back_link = Link::createFromRoute(t('Go back'), '<front>');
    $variables['back'] = $back_link->toString();
  }
}

/**
 * Implements hook_preprocess_pattern_carousel_card().
 */
function m_core_preprocess_pattern_carousel_card(&$variables) {
  $paragraph = $variables["context"]->getProperty('entity');

  $variables["attributes"]->addClass('paragraph-' . $paragraph->id());
  if ($paragraph->hasField('field_selettore_sezione')) {
    if ($paragraph->get('field_selettore_sezione')->value === '1') {
      $variables['selector'] = [
        '#type' => 'container',
        "#attributes" => [
          'class' => [
            'selector',
          ],
        ],
        'servizi' => [
          '#type' => 'container',
          "#attributes" => [
            'class' => [
              'h-section-servizi',
            ],
          ],
          'link' => Link::createFromRoute(t('Servizi'), 'm_core.selettore_sezione_carosello', [
            'paragraph_id' => $paragraph->id(),
            'section' => 'servizi',
          ], [
            "attributes" => [
              'class' => [
                'use-ajax',
                'btn',
                'btn-outline-primary',
                'active',
              ],
            ],
          ])->toRenderable(),
        ],
        'luoghi' => [
          '#type' => 'container',
          "#attributes" => [
            'class' => [
              'h-section-luoghi',
            ],
          ],
          'link' => Link::createFromRoute(t('Luoghi'), 'm_core.selettore_sezione_carosello', [
            'paragraph_id' => $paragraph->id(),
            'section' => 'luoghi',
          ], [
            "attributes" => [
              'class' => [
                'use-ajax',
                'btn',
                'btn-outline-primary',
              ],
            ],
          ])->toRenderable(),
        ],
      ];

      $field_carosello = $variables["modules"]["field_elementi_carosello_big"];
      $ajaxController = new MCoreAjaxCommandsController();
      $updated_array = $ajaxController->updateCarouselArray($field_carosello, 'servizi', SECTION_FILTER);

      $variables["modules"]["field_elementi_carosello_big"] = $updated_array;
    }
  }
}

/**
 * Implements hook_preprocess_pattern_card_image().
 */
function m_core_preprocess_pattern_card_image(&$variables) {
  if (in_array($variables["context"]->getProperty('bundle'), SECTION_FILTER)) {
    $variables["attributes"]->addClass('h-section-servizi');
  }
}

/**
 * Implements hook_preprocess_pattern_card_teaser().
 */
function m_core_preprocess_pattern_card_teaser(&$variables) {
  $attributes = $variables["attributes"];
  $attribute_array = $attributes->toArray();
  $node_id = $attribute_array['data-history-node-id'];
  $variables['node_id'] = $node_id;

  $node = $variables["context"]->getProperty('entity');

  if ($node->hasField('field_video_url') && !$node->get('field_video_url')
    ->isEmpty()) {
    $variables['card_type'] = 'card-teaser-media';
  }
}

/**
 * Implements hook_preprocess_pattern_scheda_dettaglio().
 */
function m_core_preprocess_pattern_scheda_dettaglio(&$variables) {
  $variables['breadcrumbs'] = _get_moved_breadcrumbs();
}

/**
 * Implements hook_preprocess_pattern_scheda_dettaglio_full().
 */
function m_core_preprocess_pattern_scheda_dettaglio_full(&$variables) {
  $variables['breadcrumbs'] = _get_moved_breadcrumbs();
}

/**
 * Implements hook_preprocess_pattern_scheda_dettaglio_sidebar().
 */
function m_core_preprocess_pattern_scheda_dettaglio_sidebar(&$variables) {
  $variables['breadcrumbs'] = _get_moved_breadcrumbs();

  $variables['asidenav'] = [];

  if (isset($variables["content"]["field_moduli"])) {
    foreach ($variables["content"]["field_moduli"] as $key => $module) {
      if (is_array($module) and isset($module['#paragraph'])) {
        /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
        $paragraph = $module['#paragraph'];
        if ($paragraph->hasField('field_titolo')) {
          $clean_string = Drupal::service('pathauto.alias_cleaner')
            ->cleanString($paragraph->get('field_titolo')->value);

          $variables['asidenav'][$clean_string]['text'] = $paragraph->get('field_titolo')->value;
          $variables['asidenav'][$clean_string]['datalink']['#markup'] = $clean_string;
        }
      }
    }
  }
  $node = $variables["context"]->getProperty('entity');
  if ($node->getType() === 'scheda_servizio') {
    $variables['hero_cta'] = Link::createFromRoute(t('Accedi al servizio'), '<none>', [], [
      'fragment' => 'accedi',
      'attributes' => [
        'class' => [
          'btn',
          'btn-primary',
        ],
      ],
    ]);
  }
}

/**
 * Implements hook_preprocess_pattern_hero_full().
 */
function m_core_preprocess_pattern_hero_full(&$variables) {
  $node = $variables["context"]->getProperty('entity');
  if (isset($node) && $node->getType() === 'scheda') {
    if ($variables["context"]->getProperty('view_mode') === 'slideshow') {
      $variables['category'] = new FormattableMarkup('@type', [
        '@type' => t('Places'),
      ]);

      if (isset($node->get('field_comune')->target_id)) {
        /** @var \Drupal\node\Entity\Node $comune */
        $comune = Node::load($node->get('field_comune')->target_id);
        if ($comune instanceof Node) {
          $variables['category'] .= ' - ' . $comune->getTitle();
        }
      }

      $variables['category_icon'] = 'pin';
    }
  }
}

/**
 * Implements hook_preprocess_pattern_content().
 */
function m_core_preprocess_pattern_content(&$variables) {
  $clean_string = Drupal::service('pathauto.alias_cleaner')
    ->cleanString($variables["title"]["field_titolo"][0]["#context"]["value"]);

  $variables["attributes"]->setAttribute('id', $clean_string);
}

/**
 * Implements hook_preprocess_pattern_gallery().
 */
function m_core_preprocess_pattern_gallery(&$variables) {
  $variables['gallery']['count'] = $variables["gallery"]["field_gallery"]["#items"]->count();
  foreach ($variables["gallery"]["field_gallery"] as $key => $image) {
    if (is_numeric($key) and isset($image["#theme"]) and $image["#theme"] === 'media') {
      $variables['gallery']['items'][] = $image;
    }
  }
}

/**
 * Implements hook_preprocess_pattern_banner_full().
 */
function m_core_preprocess_pattern_banner_full(&$variables) {
  if (isset($variables["link"]["field_cta"][0]["#url"])) {
    $url = $variables["link"]["field_cta"][0]["#url"];
    $title = $variables["link"]["field_cta"][0]["#title"];
    $route_name = $url->getRouteName();
    $route_params = $url->getRouteParameters();
    if (!empty($route_params)) {
      $variables["link"] = Link::createFromRoute($title, $route_name, $route_params, [
        'attributes' => [
          'class' => [
            'btn',
            'btn-primary',
          ],
        ],
      ]);
    }
  }
}

/**
 * Implements hook_preprocess_pattern_block_selection_element().
 */
function m_core_preprocess_pattern_block_selection_element(&$variables) {
  $paragraph = $variables["context"]->getProperty('entity');
  switch ($paragraph->getType()) {
    case 'selezione_comuni_servizi':
      $variables["attributes"]->addClass('selezione-servizi');

      $form = Drupal::formBuilder()
        ->getForm('Drupal\m_core\Form\SelectComuniServiziForm');

      $variables["selection"] = $form;
      break;

    case 'selezione_comuni':
      $form = Drupal::formBuilder()
        ->getForm('Drupal\m_core\Form\SelectComuniForm');

      $variables["selection"] = $form;
      break;
  }
}

/**
 * Get Breadcrumbs to be moved to another section.
 *
 * @return array
 *   The links array.
 */
function _get_moved_breadcrumbs() {
  $breadcrumb = new Breadcrumb();

  $route_match = Drupal::routeMatch();
  if ($route_match->getRouteObject() !== NULL) {
    $access = Drupal::accessManager()
      ->check($route_match, Drupal::currentUser(), NULL, TRUE);

    $breadcrumb->addCacheableDependency($access);
    $breadcrumb->addCacheContexts(['url.path']);

    $node = $route_match->getParameter('node');
    if (isset($node)) {
      $breadcrumb->addCacheableDependency($node);
    }

    $links = Breadcrumbs::getLinks($route_match);
    $links = $breadcrumb->setLinks(array_reverse($links));
    return $links->toRenderable();
  }

  return [];
}

/**
 * Implements hook_preprocess_menu__social().
 */
function m_core_preprocess_menu__social(&$variables) {
  foreach ($variables['items'] as $menu_id => $menu) {
    $description = $menu['original_link']->getDescription();
    if (isset($description) and strpos($description, 'it-') === 0) {
      $title = $variables['items'][$menu_id]['title'];
      $variables['items'][$menu_id]['title'] = new FormattableMarkup('<svg class="icon icon-sm icon-dark align-top"><use xlink:href="/themes/custom/portalemessina/dist/vendors/bootstrap-italia/svg/sprite.svg#:description"></use></svg><span class="sr-only">:title</span>', [
        ':description' => $description,
        ':title' => $title,
      ]);
      $menu['url']->setOption('attributes', ['title' => $title]);
    }
  }
}

/**
 * Get search bar form.
 *
 * @return array
 *   the form array to print.
 *
 * @throws \Drupal\Core\Form\EnforcedResponseException
 * @throws \Drupal\Core\Form\FormAjaxException
 */
function m_core_get_search_bar($args = []) {
  $view = Views::getView('search');
  $view->setDisplay('page_1');
  $view->initHandlers();
  $form_state = (new FormState())
    ->setStorage([
      'view' => $view,
      'display' => &$view->display_handler->display,
      'rerender' => TRUE,
    ])
    ->setMethod('get')
    ->setAlwaysProcess()
    ->disableRedirect();
  $form_state->set('rerender', NULL);
  return Drupal::formBuilder()
    ->buildForm('\Drupal\views\Form\ViewsExposedForm', $form_state);
}

/**
 * Implements hook_views_query_alter().
 */
function m_core_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'search') {
    if (isset($query->where[1])) {
      if (!empty($query->where[1]['conditions'][2]['field'])) {
        $conditions = $query->where[1]['conditions'][2]['field'];
        if (strpos($conditions, ":views_combine") !== FALSE) {
          $subString = substr(
            $conditions,
            0,
            strpos($conditions, ":views_combine")
          );
          $query->where[1]['conditions'][2]['field'] =
            $subString . "LOWER(:views_combine)";
        }
      }
    }
  }
}

/**
 * Get selected comune id.
 *
 * @return int|mixed|string|null
 *   The comune id.
 */
function _m_core_get_comune_selezionato() {
  $route_match = Drupal::routeMatch();
  $tempstore = Drupal::service('user.private_tempstore')->get('m_core');

  $node = $route_match->getParameter('node');
  if ($node instanceof Node) {
    if ($node->getType() === 'comune') {
      $id_comune_selezionato = $node->id();
      if (empty($id_comune_selezionato)) {
        $tempstore->set('id_comune_selezionato', NULL);
      }
    }
    elseif ($node->hasField('field_comune')) {
      $id_comune_selezionato = $node->get('field_comune')->target_id;
      $tempstore->set('id_comune_selezionato', $id_comune_selezionato);
      if (empty($id_comune_selezionato)) {
        $tempstore->set('id_comune_selezionato', NULL);
      }
    }
  }

  if (empty($id_comune_selezionato)) {
    $id_comune_selezionato = $tempstore->get('id_comune_selezionato');
  }

  return $id_comune_selezionato;
}

/**
 * Return the municipality code by its name.
 *
 * @param string $name
 *   Municipality name.
 */
function _m_core_get_municipality_code_from_name($name) {
  /** @var \Drupal\Core\Entity\EntityTypeManager $entityStorage */
  $entityStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $municipality  = $entityStorage->loadByProperties([
    'name' => $name,
    'vid' => 'comuni',
  ]);

  if (!empty($municipality)) {
    $municipality = reset($municipality);
    $municipalityId = $municipality->get('field_codice_ente')->value;
  }
  else {
    $municipalityId = PrenotaUfficioService::DEFAULT_MUNICIPALITY_CODE;
  }

  return $municipalityId;
}

/**
 * Return the municipality name by its code.
 *
 * @param string $code
 *   Municipality code.
 */
function _m_core_get_municipality_name_from_code($code) {
  /** @var \Drupal\Core\Entity\EntityTypeManager $entityStorage */
  $entityStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $municipality  = $entityStorage->loadByProperties([
    'field_codice_ente' => $code,
    'vid' => 'comuni',
  ]);

  if (!empty($municipality)) {
    $municipality = reset($municipality);
    $municipalityName = strtolower($municipality->label());
  }
  else {
    $municipalityName = 'messina';
  }

  return $municipalityName;
}

/**
 * Implements hook_views_pre_view().
 */
function m_core_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() == 'eventi' && $display_id == "block_2") {
    $filters = $view->exposed_data;
    if (!empty($filters['field_data_value'])) {
      $filters['field_data_value'] = $filters['field_data_value'] . "T00:00:00.000000+02:00";
    }
    if (!empty($filters['field_data_end_value'])) {
      $filters['field_data_end_value'] = $filters['field_data_end_value'] . "T23:59:59.999999+02:00";
    }

    $view->setExposedInput($filters);
  }
}

/**
 * Implements hook_views_pre_build().
 */
function m_core_views_pre_build(ViewExecutable $view) {
  $viewId = $view->id();
  $displayId = $view->getDisplay()->display['id'];

  // Alter events exposed date form to set default value YEAR-12-31.
  if ($viewId === 'eventi' && $displayId === 'block_2') {
    if (empty($view->filter['field_data_end_value']->value['value']) && empty($view->filter['field_data_value']->value['value'])) {
      $view->filter['field_data_value']->value['value'] = date('Y') . '-12-31';
      $view->execute();
    }
  }

  if ($viewId === 'eventi' && $displayId === 'block_5') {
    /** @var \Drupal\m_core\MCoreService $mcoreService */
    $mcoreService = \Drupal::service('m_core.default');
    /** @var \Drupal\node\Entity\Node $node */
    $node = $mcoreService->retrieveCurrentNodeFromRequest();

    // Check if node is setted.
    if (isset($node)) {
      if ($node->hasField('field_term_comune')) {
        $comune = $node->get('field_term_comune')->entity->id();

        $termComune = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
          'type' => 'comune',
          'field_term_comune' => $comune,
        ]);

        $termComune = reset($termComune);
        $termComune = $termComune->id();

        $view->setArguments([$termComune]);
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function m_core_node_presave(EntityInterface $entity) {
  $bundle = $entity->bundle();

  if ($bundle === 'itinerario') {
    // Check if geojson data was changed.
    $original = $entity->original;
    $newGeoData = $entity->get('field_percorso')->value;
    $originalGeoData = $original->get('field_percorso')->value;
    if ($newGeoData !== $originalGeoData) {
      // Only in this case i will update the geojson
      // data for the google maps' routes.
      // GeoPHP Service.
      $geophp = Drupal::service('geofield.geophp');
      // Get MULTIPOINT from field_percorso.
      $multipoints = $entity->field_percorso->value;
      // Get MULTIPOINTs from field's value.
      $multipoints = $geophp->load($multipoints);
      // Array that will contains all points' coords.
      $coordinates = [];
      $coordinatesStrings = [];

      foreach ($multipoints->components as $point) {
        $geomType = $point->getGeomType();
        if ($geomType === "Point") {
          $coordinates[] = [$point->coords[1], $point->coords[0]];
          $coordinatesStrings[] = implode(',', [
            $point->coords[1],
            $point->coords[0],
          ]);
        }
      }

      // Save first and last coords before removing them from array.
      $startCoords = reset($coordinates);
      $endCoords = end($coordinates);

      // Removing the first and last items that corresponds
      // to origin (first) and destination (last).
      unset($coordinates[0]);
      unset($coordinates[count($coordinates)]);

      // Instance httpClient.
      $httpClient = Drupal::httpClient();

      $uri = NULL;

      // Execute GET request to directions API.
      $response = $httpClient->get('https://maps.googleapis.com/maps/api/directions/json', [
        'query' => [
          'origin' => implode(',', $startCoords),
          'destination' => implode(',', $endCoords),
          'waypoints' => implode('|', $coordinatesStrings),
          'key' => Drupal::config('geofield_map.settings')
            ->get('gmap_api_key'),
        ],
        'on_stats' => function (TransferStats $stats) use (&$url) {
          $uri = $stats->getEffectiveUri();
        },
      ]);

      $entity->set('field_geojson_routes', $response->getBody()->getContents());
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function m_core_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->bundle() === 'itinerario' && $build['#view_mode'] === 'full') {
    if (isset($entity->field_percorso->value)) {
      // Attaching the geojson_routes library.
      $build['#attached']['library'][] = 'm_core/geojson_routes';

      // GeoPHP Service.
      $geophp = Drupal::service('geofield.geophp');
      // Get MULTIPOINT from field_percorso.
      $multipoints = $entity->field_percorso->value;
      // Get MULTIPOINTs from field's value.
      $multipoints = $geophp->load($multipoints);
      // Array that will contains all points' coords.
      $coordinates = [];

      foreach ($multipoints->components as $point) {
        $geomType = $point->getGeomType();
        if ($geomType === "Point") {
          $coordinates[] = $point->coords;
        }
      }

      // Save first and last coords before removing them from array.
      $startCoords = reset($coordinates);
      $endCoords = end($coordinates);

      // Removing the first and last items that corresponds
      // to origin (first) and destination (last).
      unset($coordinates[0]);
      unset($coordinates[count($coordinates)]);

      $strockeColor = isset($entity->get('field_colore_marker')[0]) ?
        $entity->get('field_colore_marker')[0]->getValue()['color'] : '#FF0000';

      // Passing builded array to drupalSettings.
      $build['#attached']['drupalSettings']['m_maps']['directions'] = [
        'strokeColor' => $strockeColor,
        'origin' => $startCoords,
        'destination' => $endCoords,
        'waypoints' => array_values($coordinates),
        // This is the previews request's response obtained
        // during the itinerario saving. This is a method to avoid
        // the billing of multiples and numerouses google api
        // directions requestes.
        'parsedResponse' => $entity->field_geojson_routes->value,
      ];
    }
  }
  if ($entity->bundle() === 'aggregatore_servizi' && $build['#view_mode'] === 'full') {
    // Get service's category.
    $category = $build['#node']->get('field_categoria_agg_servizi')->entity->label();

    // Check if this service has "Prenota ufficio" category.
    if ($category == 'Prenota ufficio') {
      /** @var \Drupal\m_api\PrenotaUfficioService $service */
      $service = \Drupal::service('m_api.prenotaufficio_client');
      /** @var \Drupal\m_api\MClientService $client */
      $client = \Drupal::service('m_api.m_client');

      // Default municipality code (Messina).
      $municipalityId = PrenotaUfficioService::DEFAULT_MUNICIPALITY_CODE;

      // Get comune's name.
      $comune = $build['#node']->get('field_comune');
      if (isset($comune)) {
        if (isset($comune->entity)) {
          $comune = $comune->entity->label();
          $comune = strtolower($comune);

          $serviceTypes       = $service->getServiceTypes($municipalityId);
          $currentServiceType = count($serviceTypes) ? $serviceTypes[0] : FALSE;

          $build['#attached']['library'][] = 'm_api/prenota-ufficio-offices-list';
          $build['#attached']['drupalSettings']['m_api'] = [
            'token'     => Wso2Connection::getAccessToken(),
            'endpoints' => [
              'officesList'        => Url::fromRoute('m_api.prenota_ufficio.api-lista-uffici-filtro', [
                'municipalityName' => $comune,
              ])->toString(),
              'publicServicesList' => '/it/servizi/messina/prenota-ufficio/api/publicServices',
            ],
            'data'      => [
              'serviceTypes'   => $serviceTypes,
              'publicServices' => $service->getPublicServices($currentServiceType['id']),
              'officesList'    => $service->getOfficesList($municipalityId, $currentServiceType['id']),
              'ente'           => $municipalityId,
            ],
          ];
        }
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function m_core_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'field' && $variables['element']['#entity_type'] == 'paragraph' && $variables["element"]["#bundle"] == 'vista') {
    $node = Drupal::service('m_core.default')->retrieveCurrentNodeFromRequest();
    if (isset($node)) {
      $type = $node->getType();
      if ($type == 'comune_servizi') {
        if ($node->hasField('field_moduli') && !$node->get('field_moduli')->isEmpty()) {
          $paragraphs = $node->get('field_moduli')->getValue();
          foreach ($paragraphs as $paragraph) {
            $val = Paragraph::load($paragraph["target_id"]);
            $paragraphType = $val->getType();
            if ($paragraphType == 'vista') {
              if ($val->hasField('field_vista') && !$val->get('field_vista')->isEmpty()) {
                $view = $val->get('field_vista')->getValue();
                if (!empty($view[0]['target_id']) && $view[0]['target_id'] == 'aggregatore_servizi_per_comune') {
                  $suggestion = $hook . '__' .
                    $variables['element']['#entity_type']
                    . '__' . $variables['element']['#field_name']
                    . '__' . $variables['element']['#bundle'];
                  $suggestions[] = $suggestion . '_' . $view[0]['target_id'] . '_' . $view[0]['display_id'];
                }
              }
            }
          }
        }
      }
    }
  }
}
